/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, Binary, EncryptedData } from "./Buy.types";
export interface BuyReadOnlyInterface {
  contractAddress: string;
  getEncryptedData: ({
    address
  }: {
    address: Binary;
  }) => Promise<EncryptedData>;
}
export class BuyQueryClient implements BuyReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getEncryptedData = this.getEncryptedData.bind(this);
  }

  getEncryptedData = async ({
    address
  }: {
    address: Binary;
  }): Promise<EncryptedData> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_encrypted_data: {
        address
      }
    });
  };
}
export interface BuyInterface extends BuyReadOnlyInterface {
  contractAddress: string;
  sender: string;
  buyAndStoreData: ({
    buyTokenIds,
    cartPriceUsd,
    encryptedData
  }: {
    buyTokenIds: string[];
    cartPriceUsd: Uint128;
    encryptedData: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawFunds: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class BuyClient extends BuyQueryClient implements BuyInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.buyAndStoreData = this.buyAndStoreData.bind(this);
    this.withdrawFunds = this.withdrawFunds.bind(this);
  }

  buyAndStoreData = async ({
    buyTokenIds,
    cartPriceUsd,
    encryptedData
  }: {
    buyTokenIds: string[];
    cartPriceUsd: Uint128;
    encryptedData: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_and_store_data: {
        buy_token_ids: buyTokenIds,
        cart_price_usd: cartPriceUsd,
        encrypted_data: encryptedData
      }
    }, fee, memo, funds);
  };
  withdrawFunds = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_funds: {
        amount
      }
    }, fee, memo, funds);
  };
}