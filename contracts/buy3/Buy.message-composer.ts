/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin } from '@cosmjs/amino'
import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { toUtf8 } from '@cosmjs/encoding'
import {
  InstantiateMsg,
  ExecuteMsg,
  Uint128,
  QueryMsg,
  Binary,
  EncryptedData,
} from './Buy.types'
export interface BuyMessage {
  contractAddress: string
  sender: string
  buyAndStoreData: (
    {
      buyTokenIds,
      cartPriceUsd,
      encryptedData,
    }: {
      buyTokenIds: string[]
      cartPriceUsd: Uint128
      encryptedData: string
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  withdrawFunds: (
    {
      amount,
    }: {
      amount: Uint128
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
}
export class BuyMessageComposer implements BuyMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.buyAndStoreData = this.buyAndStoreData.bind(this)
    this.withdrawFunds = this.withdrawFunds.bind(this)
  }

  buyAndStoreData = (
    {
      buyTokenIds,
      cartPriceUsd,
      encryptedData,
    }: {
      buyTokenIds: string[]
      cartPriceUsd: Uint128
      encryptedData: string
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            buy_and_store_data: {
              buy_token_ids: buyTokenIds,
              cart_price_usd: cartPriceUsd,
              encrypted_data: encryptedData,
            },
          })
        ),
        funds,
      }),
    }
  }
  withdrawFunds = (
    {
      amount,
    }: {
      amount: Uint128
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            withdraw_funds: {
              amount,
            },
          })
        ),
        funds,
      }),
    }
  }
}
