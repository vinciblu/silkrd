/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, QueryMsg, ConfigResponse, ResolveRecordResponse } from "./Nameservice.types";
export interface NameserviceReadOnlyInterface {
  contractAddress: string;
  resolveRecord: ({
    name
  }: {
    name: string;
  }) => Promise<ResolveRecordResponse>;
  config: () => Promise<ConfigResponse>;
}
export class NameserviceQueryClient implements NameserviceReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.resolveRecord = this.resolveRecord.bind(this);
    this.config = this.config.bind(this);
  }

  resolveRecord = async ({
    name
  }: {
    name: string;
  }): Promise<ResolveRecordResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      resolve_record: {
        name
      }
    });
  };
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface NameserviceInterface extends NameserviceReadOnlyInterface {
  contractAddress: string;
  sender: string;
  register: ({
    name
  }: {
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  transfer: ({
    name,
    to
  }: {
    name: string;
    to: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class NameserviceClient extends NameserviceQueryClient implements NameserviceInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.register = this.register.bind(this);
    this.transfer = this.transfer.bind(this);
  }

  register = async ({
    name
  }: {
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register: {
        name
      }
    }, fee, memo, funds);
  };
  transfer = async ({
    name,
    to
  }: {
    name: string;
    to: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer: {
        name,
        to
      }
    }, fee, memo, funds);
  };
}