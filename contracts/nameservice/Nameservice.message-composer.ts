/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { toUtf8 } from '@cosmjs/encoding'
import {
  Uint128,
  InstantiateMsg,
  Coin,
  ExecuteMsg,
  QueryMsg,
  ConfigResponse,
  ResolveRecordResponse,
} from './Nameservice.types'
export interface NameserviceMessage {
  contractAddress: string
  sender: string
  register: (
    {
      name,
    }: {
      name: string
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  transfer: (
    {
      name,
      to,
    }: {
      name: string
      to: string
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
}
export class NameserviceMessageComposer implements NameserviceMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.register = this.register.bind(this)
    this.transfer = this.transfer.bind(this)
  }

  register = (
    {
      name,
    }: {
      name: string
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            register: {
              name,
            },
          })
        ),
        funds,
      }),
    }
  }
  transfer = (
    {
      name,
      to,
    }: {
      name: string
      to: string
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            transfer: {
              name,
              to,
            },
          })
        ),
        funds,
      }),
    }
  }
}
