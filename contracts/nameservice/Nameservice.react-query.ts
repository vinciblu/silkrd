/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, QueryMsg, ConfigResponse, ResolveRecordResponse } from "./Nameservice.types";
import { NameserviceQueryClient, NameserviceClient } from "./Nameservice.client";
export const nameserviceQueryKeys = {
  contract: ([{
    contract: "nameservice"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...nameserviceQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  resolveRecord: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nameserviceQueryKeys.address(contractAddress)[0],
    method: "resolve_record",
    args
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...nameserviceQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const)
};
export const nameserviceQueries = {
  resolveRecord: <TData = ResolveRecordResponse,>({
    client,
    args,
    options
  }: NameserviceResolveRecordQuery<TData>): UseQueryOptions<ResolveRecordResponse, Error, TData> => ({
    queryKey: nameserviceQueryKeys.resolveRecord(client?.contractAddress, args),
    queryFn: () => client ? client.resolveRecord({
      name: args.name
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  config: <TData = ConfigResponse,>({
    client,
    options
  }: NameserviceConfigQuery<TData>): UseQueryOptions<ConfigResponse, Error, TData> => ({
    queryKey: nameserviceQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface NameserviceReactQuery<TResponse, TData = TResponse> {
  client: NameserviceQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface NameserviceConfigQuery<TData> extends NameserviceReactQuery<ConfigResponse, TData> {}
export function useNameserviceConfigQuery<TData = ConfigResponse>({
  client,
  options
}: NameserviceConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(nameserviceQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NameserviceResolveRecordQuery<TData> extends NameserviceReactQuery<ResolveRecordResponse, TData> {
  args: {
    name: string;
  };
}
export function useNameserviceResolveRecordQuery<TData = ResolveRecordResponse>({
  client,
  args,
  options
}: NameserviceResolveRecordQuery<TData>) {
  return useQuery<ResolveRecordResponse, Error, TData>(nameserviceQueryKeys.resolveRecord(client?.contractAddress, args), () => client ? client.resolveRecord({
    name: args.name
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface NameserviceTransferMutation {
  client: NameserviceClient;
  msg: {
    name: string;
    to: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNameserviceTransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NameserviceTransferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NameserviceTransferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transfer(msg, fee, memo, funds), options);
}
export interface NameserviceRegisterMutation {
  client: NameserviceClient;
  msg: {
    name: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useNameserviceRegisterMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, NameserviceRegisterMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, NameserviceRegisterMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.register(msg, fee, memo, funds), options);
}